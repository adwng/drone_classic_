<?xml version="1.0" ?>
<robot name="sjtu_drone" xmlns:xacro="http://www.ros.org/wiki/xacro">
<!-- https://answers.ros.org/question/379014/passing-outside-parameters-into-urdf-file-using-xacro/ -->
  <!-- Need argument to get from launch file -->
  <xacro:arg name="params_path" default="$(find sjtu_drone_bringup)/config/drone.yaml"/> 

  <!-- Need seperate property for xacro inorder processing -->
  <xacro:property name="params_path" value="$(arg params_path)"/> 

  <!-- Read in the yaml dict as mp (short for model parameters) -->
  <xacro:property name="mp" value="${xacro.load_yaml(params_path)}"/> 

  <xacro:property name="M_PI" value="3.14159265359" />

  <link name="base_footprint"/>
  <joint name="base_footprint_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <parent link="base_footprint"/>
    <child link="base_link"/>
  </joint>

  <link name="base_link">
    <inertial>
      <mass value="1.477"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.1152" ixy="0" ixz="0" iyy="0.1152" iyz="0" izz="0.218"/>
    </inertial>
    <collision name="sjtu_drone_collision">
      <origin rpy="0 0 0" xyz="0   0   0.04"/>
      <geometry>
        <mesh filename="file://$(find description)/models/sjtu_drone/quadrotor_4.stl"/>
        <!-- <mesh filename="package://sjtu_drone/quadrotor_4.stl"/> -->
      </geometry>
    </collision>
    <visual name="sjtu_drone_visual">
      <origin rpy="0 0 0" xyz="0   0   0.04"/>
      <geometry>
        <mesh filename="file://$(find description)/models/sjtu_drone/quadrotor_4.dae"/>
        <!-- <mesh filename="package://sjtu_drone/quadrotor_4.dae"/> -->
      </geometry>
    </visual>
  </link>

  <material name="white">
        <color rgba="1 1 1 1" />
  </material>

  <joint name="laser_joint" type="fixed">
    <parent link="base_link" />
    <child link="laser_link" />
    <origin rpy="0 0 0" xyz="0.0 0 0.04"/>
  </joint>

  <link name="laser_link"> 
    <visual>
      <geometry>
          <cylinder radius="0.02" length="0.02"/>
      </geometry>
        <material name="white"/>
    </visual>
    <collision>
      <geometry>
          <cylinder radius="0.05" length="0.02"/>
      </geometry>
      <material name="white"/>
    </collision>
  </link>

  <joint name="camera_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0.2 0 0"/>
    <parent link="base_link" />
    <child link="camera_link" />
  </joint>
  <link name="camera_link"/>

  <joint name="camera_optical_joint" type="fixed">
    <parent link="camera_link"/>
    <child link="camera_link_optical"/>
    <origin rpy="${-pi/2} 0 ${-pi/2}" xyz="0.2 0 0"/>
  </joint>
  <link name="camera_link_optical"></link>

  <gazebo>
    <plugin name='simple_drone' filename='libplugin_drone.so'>
      <ros>
        <remapping>cmd_vel:=cmd_vel</remapping>
      </ros>

      <bodyName>base_link</bodyName>
      <pub_odom>true</pub_odom>
      <rollpitchProportionalGain>${mp['rollpitchProportionalGain']}</rollpitchProportionalGain>
      <rollpitchDifferentialGain>${mp['rollpitchDifferentialGain']}</rollpitchDifferentialGain>
      <rollpitchLimit>${mp['rollpitchLimit']}</rollpitchLimit>
      <yawProportionalGain>${mp['yawProportionalGain']}</yawProportionalGain>
      <yawDifferentialGain>${mp['yawDifferentialGain']}</yawDifferentialGain>
      <yawLimit>${mp['yawLimit']}</yawLimit>
      <velocityXYProportionalGain>${mp['velocityXYProportionalGain']}</velocityXYProportionalGain>
      <velocityXYDifferentialGain>${mp['velocityXYDifferentialGain']}</velocityXYDifferentialGain>
      <velocityXYLimit>${mp['velocityXYLimit']}</velocityXYLimit>
      <velocityZProportionalGain>${mp['velocityZProportionalGain']}</velocityZProportionalGain>
      <velocityZIntegralGain>${mp['velocityZIntegralGain']}</velocityZIntegralGain>
      <velocityZDifferentialGain>${mp['velocityZDifferentialGain']}</velocityZDifferentialGain>
      <velocityZLimit>${mp['velocityZLimit']}</velocityZLimit>
      <positionXYProportionalGain>${mp['positionXYProportionalGain']}</positionXYProportionalGain>
      <positionXYDifferentialGain>${mp['positionXYDifferentialGain']}</positionXYDifferentialGain>
      <positionXYIntegralGain>${mp['positionXYIntegralGain']}</positionXYIntegralGain>
      <positionXYLimit>${mp['positionXYLimit']}</positionXYLimit>
      <positionZProportionalGain>${mp['positionZProportionalGain']}</positionZProportionalGain>
      <positionZDifferentialGain>${mp['positionZDifferentialGain']}</positionZDifferentialGain>
      <positionZIntegralGain>${mp['positionZIntegralGain']}</positionZIntegralGain>
      <positionZLimit>${mp['positionZLimit']}</positionZLimit>
      <maxForce>${mp['maxForce']}</maxForce>
      <motionSmallNoise>${mp['motionSmallNoise']}</motionSmallNoise>
      <motionDriftNoise>${mp['motionDriftNoise']}</motionDriftNoise>
      <motionDriftNoiseTime>${mp['motionDriftNoiseTime']}</motionDriftNoiseTime>
    </plugin>
  </gazebo>

  <!-- Sensors -->
  <!-- IMU sensor in 100fps -->
  <gazebo reference="base_link">
    <sensor name='sensor_imu' type='imu'>
      <always_on> 1 </always_on>
      <visualize>1</visualize>
      <update_rate> 10 </update_rate>
      <pose> 0 0 0 0 0 0 </pose>
      <imu>
        <noise>
          <type>gaussian</type>
          <rate>
            <mean> 0 </mean>
            <stddev> 0.01 </stddev>
          </rate>
          <accel>
            <mean> 0 </mean>
            <stddev> 0.01 </stddev>
          </accel>
        </noise>
      </imu>
      <plugin name='imu' filename='libgazebo_ros_imu_sensor.so'>
        <ros>
          <!-- <namespace>${mp['namespace']}</namespace> -->
          <remapping>imu:=imu</remapping>
        </ros>
        <initial_orientation_as_reference>false</initial_orientation_as_reference>
      </plugin>
    </sensor>
  </gazebo>

   <!-- Sonar sensor in 100fps -->
  <gazebo reference="laser_link">
    <sensor name="laser" type="ray">
      <always_on>1</always_on>
      <visualize>0</visualize>
      <update_rate>10</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>360</samples>
            <min_angle>-3.14</min_angle>
            <max_angle>3.14</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.4</min>
          <max>20</max>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin name="laser" filename="libgazebo_ros_ray_sensor.so">
        <ros>
          <!-- <namespace>${mp['namespace']}</namespace> -->
          <remapping>~/out:=scan</remapping>
        </ros>
        <output_type>sensor_msgs/LaserScan</output_type>
      </plugin>
    </sensor>
  </gazebo>

  <gazebo reference="camera_link">
    <sensor name="camera" type="depth">
      <visualize>1</visualize>
      <update_rate>10</update_rate>
      <camera>
        <horizontal_fov>1.089</horizontal_fov>
        <image>
          <width>640</width>
          <height>480</height>
          <format>B8G8R8</format>
        </image>
        <clip>
          <near>0.1</near>
          <far>10</far>
        </clip>
      </camera>
      <plugin name="camera_front" filename="libgazebo_ros_camera.so">
        <frame_name>camera_link_optical</frame_name>
      </plugin>
    </sensor>
  </gazebo>

</robot>
